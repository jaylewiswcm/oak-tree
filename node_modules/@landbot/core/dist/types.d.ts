import { MESSAGE_TYPES } from './constants/TYPES';
import { EVENTS } from './constants/EVENTS';
import { Subject, BehaviorSubject } from 'rxjs';
declare global {
    interface Window {
        Landbot: {};
    }
}
export declare type MessageTypes = typeof MESSAGE_TYPES[keyof typeof MESSAGE_TYPES];
export declare type EventsTypes = typeof EVENTS[keyof typeof EVENTS];
export declare enum TYPING_MODES {
    AUTO = "auto",
    CUSTOM = "custom"
}
export interface Message {
    key: string;
    type: MessageTypes;
    seq?: number;
    ui_key?: string;
    samurai?: number | string;
    timestamp?: number;
    extra?: {
        typing: TYPING_MODES;
        typing_delay: number;
    };
    message?: string;
    title?: string;
    action?: string;
}
export interface SendingMessage {
    type: MessageTypes;
    message: string;
    payload: string;
    custom_data?: Record<string, any>;
    channel_token: string;
    customer_token: string;
    metadata_info: {
        string: string;
    };
    origin: string;
}
export interface TypingMessage {
    key: string;
    state: boolean;
    message: Message;
    delay?: number;
}
export declare type Messages = Record<Message['key'], Message>;
export declare type ConfigProperties = {
    configUrl?: string;
    firebase: any;
    apiKey?: string;
    authDomain?: string;
    databaseURL?: string;
    storageBucket?: string;
    serverUrl?: string;
    welcomeUrl?: string;
    brandID: number;
    channelToken: string;
    customerToken?: string;
    welcome?: Message[];
    typing_options?: {
        state: boolean;
        block_custom?: boolean;
        delay?: {
            is_constant: boolean;
            constant: number;
            average_human_reading_speed: number;
            max_delay: number;
        };
    };
    storage_off?: boolean;
    forceWebsockets?: boolean;
};
export declare type CoreConfig = {
    configUrl: string;
    firebase: any;
} | ConfigProperties;
export declare type ChatsCoreConfig = {
    firebase: any;
    app_id: string;
    api_key: string;
    project_id: string;
    brand_token: string;
    brand_uuid: string;
    experimentalAutoDetectLongPolling?: boolean;
    experimentalForceLongPolling?: boolean;
    useFetchStreams?: boolean;
};
export declare const CONFIG_KEYS: readonly ["firebase", "apiKey", "authDomain", "databaseURL", "storageBucket", "serverUrl", "welcomeUrl", "brandID", "channelToken", "customerToken", "welcome", "typing_options", "storage_off", "forceWebsockets"];
export interface AuthData {
    customer_id: string;
    firebase_token: string;
    last_timestamp: number;
}
export interface InitializationData {
    customerToken: ConfigProperties['customerToken'];
    isNewSession: boolean;
    messages: Messages;
}
export interface Pipelines {
    $sequence: Subject<Message>;
    $typingSequence: BehaviorSubject<TypingMessage>;
    $readableSequence: Subject<Message>;
}
export interface FetchProps {
    url: string;
    method?: string;
    headers?: HeadersInit;
    body?: BodyInit;
}
