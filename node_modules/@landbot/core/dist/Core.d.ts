/// <reference types="node" />
import { Database } from './database';
import { EventEmitter } from './events';
import { Storage } from './storage';
import { Config } from './config';
import * as utils from './utils';
import { ConfigProperties, CoreConfig, Messages, InitializationData, SendingMessage, Pipelines } from './types';
/**
 * Landbot.Core module.
 *
 * @param {{ configUrl }} initialConfig
 * @example
 * // In browser:
 * const core = new Landbot.Core({
 *   configUrl: 'https://.../index.json'
 * });
 * core
 *   .init()
 *   .then(data => console.log(data));
 */
export declare class Core {
    /**
     * Config can be a single property { configUrl } given by a landbot
     * snippet or a full configuration object.
     */
    config: Config & ConfigProperties;
    /**
     * Received from config object at instance construction.
     */
    configUrl: string;
    /**
     * The customer token is the most important property of the
     * landbot core.
     */
    customerToken: string;
    /**
     * Async handlers.
     * - Setup promise to prevent parallel setups.
     */
    private setupPromise;
    events: EventEmitter;
    pipelines: Pipelines;
    storage: Storage;
    database: Database;
    static utils: typeof utils;
    constructor(initialConfig: CoreConfig);
    /**
     * Initialization task.
     */
    init(): Promise<InitializationData>;
    /**
     * Destruction task.
     */
    destroy(): void;
    /**
     * Message sending method.
     */
    sendMessage(data: Partial<SendingMessage>): Promise<void>;
    /**
     * Given a Config URL (by Landbot), return a promise that results
     * in a config object.
     */
    fetchConfig(configUrl: ConfigProperties['configUrl']): Promise<Partial<ConfigProperties>>;
    /**
     * Config setter. Can be called before init. After that, it's
     * useless to change any behavior of the core.
     */
    setConfig(config: Partial<ConfigProperties>): void;
    /**
     * Get initial (welcome) messages defined in config.
     */
    getInitialMessages(): {};
    /**
     * Get last messages stored in database.
     */
    getLastMessages(amount?: number): Promise<Messages>;
    /**
     * Get previous messages from database.
     */
    getMoreMessages(amount: number): Promise<Messages>;
    /**
     * Execute internal destruction tasks.
     */
    private _destroy;
    /**
     * Retrieve the customer token if it's stored or given.
     */
    private _getCustomerToken;
    /**
     * Get the core init resolving data.
     */
    private _getInitializationData;
    /**
     * Get a message object data. Default params are
     * set in this method.
     */
    private _getMessageData;
    /**
     * Initialize core method.
     * If customerToken:
     * 1. Setup database client with auth and listeners.
     * 2. Resolves with core initialization data.
     * Catch. A new session is created. An error can be caught if
     * given customer token is not valid.
     */
    private _init;
    /**
     * On connection change listener.
     */
    private _onConnectionChange;
    /**
     * On message received listener.
     */
    private _onNewMessage;
    /**
     * New session initialization tasks:
     *
     * If welcomeUrl:
     * 1. Fetch visitor firebase token.
     * 2. Store customer token and auth.
     * 3. Setup database listeners.
     *
     * Else:
     * 1. Returns welcome messages.
     */
    private _onNewSession;
    /**
     * Send message method.
     */
    private _sendMessage;
    /**
     * Authentication and database setup tasks.
     * 1. Auth request resolves with user authentication data.
     * 2. Execute database authentication.
     * 3. Setup database listeners.
     */
    private _setupClient;
    private _getAuthWithWelcomeFallback;
    private _getAuthToken;
    /**
     * Setup database listeners:
     * 1. Set database references with new values.
     * 2. Setup listeners for new authentication data.
     */
    private _setupDatabaseListeners;
    /**
     * Store the given customer token in local storage and in
     * the core instance.
     */
    private _storeCustomerToken;
    /**
     * Check customer token and retry database authentication.
     */
    private _updateCustomerToken;
    /**
     * Some modules require a reset when setConfig is triggered.
     */
    private _resetConfigSensibleModules;
}
